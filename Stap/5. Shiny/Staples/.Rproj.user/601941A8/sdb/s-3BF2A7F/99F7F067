{
    "contents" : "# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n#                                                   Shiny\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n#                                     Staples Price Elasticity : server.R : reactive\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# \n# library(shiny)\n# library(psych)\n# \n# shinyServer(\n#   function(input,output){\n#     \n#     output$describe <- renderPrint({\n#       data = data.frame(subset(Staples_IP,Loyalty_Cat==input$Loyalty_Cat))\n#       describe(data[,sapply(data,is.numeric)])\n#     })\n#     output$cor <- renderPrint({\n#       data = data.frame(subset(Staples_IP,Loyalty_Cat==input$Loyalty_Cat))\n#       cor(data[,c(\"Conversion\",\"Price_Comp\")])\n#       \n#     })\n#   }\n# )\n\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n#                                       Weekly : server.R : reactive\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n\n# shinyServer(\n#   function(input,output){\n#     \n#     output$describe <- renderPrint({\n#       data = data.frame(subset(Staples_Aggr_Weekly,Loyalty_Cat==input$Loyalty_Cat))\n#       describe(data[,sapply(data,is.numeric)])\n#     })\n#     output$cor <- renderPrint({\n#       data = data.frame(subset(Staples_Aggr_Weekly,Loyalty_Cat==input$Loyalty_Cat))\n#       cor(data[,c(\"Conversion\",\"Price_Comp\")])\n#       \n#     })\n#   }\n# )\n# \n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n#                                       Monthly : server.R : reactive\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n\n# library(psych)\n# setwd(\"C:/Yashwanth/Staples PE/5. Shiny/Staples_Apps/\")\n# Staples_Aggr_Monthly <- read.csv(\"data/Staples_Aggr_Monthly.csv\",header = TRUE, sep = \",\", quote = \"\\\"\", dec = \".\" ,fill=TRUE, comment.char=\"\", \n#                                  as.is=TRUE)\n# \n# shinyServer(\n#   function(input,output){\n#     \n#     output$describe <- renderPrint({\n#       data = data.frame(subset(Staples_Aggr_Monthly,Loyalty_Cat==input$Loyalty_Cat & Product_ID==input$Product_ID))\n#       describe(data[,sapply(data,is.numeric)])\n#     })\n#     output$cor <- renderPrint({\n#       data = data.frame(subset(Staples_Aggr_Monthly,Loyalty_Cat==input$Loyalty_Cat & Product_ID==input$Product_ID))\n#       cor(data[,c(\"Conversion\",\"Price_Comp\")])\n#       \n#     })\n#   }\n# )\n\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n#                                   Monthly : server.R : reactive : t.test\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n\nshinyServer(function(input, output, session) {\n  \n  data <- reactive({\n    inFile <- input$file1 \n    if (is.null(inFile)){return(NULL)} \n    read.csv(inFile$datapath, header=input$header, sep=input$sep, \n             quote=input$quote)\n  })\n  \n  \n  # Updata value user could select\n  observe({\n    updateSelectInput(\n      session,\n      \"var1\",\n      choices=names(data()))\n    \n  })\n  # Updata value user could select\n  observe({\n    updateSelectInput(\n      session,\n      \"var2\",\n      choices=names(data()))\n    \n  })\n  \n  # Output a data table for the upload tab page\n  output$contents <- renderTable({\n    inFile <- input$file1 \n    if (is.null(inFile))\n      return(NULL)\n    read.csv(inFile$datapath, header=input$header, sep=input$sep, quote=input$quote)\n    \n  })\n  \n  # Output a histogram for the variables user chose\n  output$graph <- renderPlot({\n    var1 <- data()[,input$var1]\n    var2 <- data()[,input$var2]\n    if (is.null(var1)){return(NULL)}\n    if (is.null(var2)){return(NULL)}\n    graph2 <- ifelse(input$sample == 'oneSamp', FALSE, TRUE)\n    p1 <- hist(var1, breaks = input$bins)\n    p2 <- hist(var2, breaks = input$bins)\n    plot(p1, col=rgb(0,0,1,1/4))\n    if(input$sample == 'twoSamp')\n      plot(p2, col=rgb(1,0,0,1/4),add = graph2)\n  })\n  \n  # Output of discriptive summary of this variable\n  output$disc <-  renderPrint({\n    Data <- data()\n    if (is.null(Data)){return(NULL)}\n    summary(Data)\n  })\n  \n  # Output of the data structure\n  output$str <- renderPrint({\n    Data <- data()\n    if (is.null(Data)){return(NULL)}\n    str(Data)\n  })\n  \n  # Create a one sample and two sample t-test reactive function\n  ttestout <- reactive({\n    var1 <- data()[,input$var1]\n    conf <- input$conf\n    if (is.null(var1)){return(NULL)}\n    t1 <- t.test(var1, alternative = input$tail, mu = input$test, conf.level = conf)\n    var2 <- data()[,input$var2]\n    if (is.null(var2)){return(NULL)}\n    ve <- ifelse(input$varequal == 'y', TRUE, FALSE)\n    t2 <- t.test(var1, var2, alternative = input$tail, var.equal = ve, conf.level = conf)\n    if(input$sample == \"oneSamp\") {return(t1)}\n    if(input$sample == \"twoSamp\") {return(t2)}\n    \n  })\n  \n  # Output of one sample t value of t-test\n  output$tvalue <- renderPrint({\n    vals <- ttestout()\n    if (is.null(vals)){return(NULL)}\n    vals$statistic\n  })\n  \n  # Output of p value\n  output$pvalue <- renderPrint({\n    vals <- ttestout()\n    if (is.null(vals)){return(NULL)}\n    vals$p.value \n  })\n  \n  # Output of key statistical parametric\n  output$parametric <- renderTable({\n    var1 <- data()[,input$var1]\n    if (is.null(var)){return(NULL)}\n    var2 <- data()[,input$var2]\n    if (is.null(var)){return(NULL)}\n    mean1 <- mean(var1)\n    mean2 <- mean(var2)\n    standard_deviation1 <- sd(var1)\n    standard_deviation2 <- sd(var2)\n    standard_error1 <- sd(var1)/sqrt(length(var1))\n    standard_error2 <- sd(var2)/sqrt(length(var2))\n    parametric1 <- data.frame(mean = mean1, \n                              standard_deviation=standard_deviation1, \n                              standard_error=standard_error1)\n    rownames(parametric1) <- input$var1\n    parametric2 <- data.frame(mean = mean2, \n                              standard_deviation=standard_deviation2, \n                              standard_error=standard_error2)\n    rownames(parametric2) <- input$var2\n    if(input$sample == \"oneSamp\") {return(parametric1)}\n    if(input$sample == \"twoSamp\") {return(rbind(parametric1,parametric2))}\n  })\n  \n  \n  \n})\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------- END ---------------------------- Shiny ------------------------- END -------------------------\n# --------------------------------------------------------------------------------------------------------------\n# --------------------------------------------------------------------------------------------------------------\n",
    "created" : 1440487008804.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3469436776",
    "id" : "99F7F067",
    "lastKnownWriteTime" : 1440412102,
    "path" : "~/R/Staples/6. Shiny_Local/Staples_Apps/server.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}